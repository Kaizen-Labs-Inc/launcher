
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.5.0
 * Query Engine version: 78a5df6def6943431f4c022e1428dbc3e833cf8e
 */
Prisma.prismaVersion = {
  client: "3.5.0",
  engine: "78a5df6def6943431f4c022e1428dbc3e833cf8e"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.OrganizationScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  dateCreated: 'dateCreated',
  lastModified: 'lastModified'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  googleProfileId: 'googleProfileId',
  organizationId: 'organizationId',
  dateCreated: 'dateCreated',
  lastModified: 'lastModified'
});

exports.Prisma.GoogleProfileScalarFieldEnum = makeEnum({
  id: 'id',
  sub: 'sub',
  name: 'name',
  given_name: 'given_name',
  family_name: 'family_name',
  picture: 'picture',
  email: 'email',
  email_verified: 'email_verified',
  locale: 'locale',
  hd: 'hd',
  provider: 'provider',
  dateCreated: 'dateCreated',
  lastModified: 'lastModified'
});

exports.Prisma.BoardScalarFieldEnum = makeEnum({
  id: 'id',
  boardType: 'boardType',
  userId: 'userId',
  dateCreated: 'dateCreated',
  lastModified: 'lastModified'
});

exports.Prisma.PositionScalarFieldEnum = makeEnum({
  id: 'id',
  position: 'position',
  boardId: 'boardId',
  channelId: 'channelId',
  dateCreated: 'dateCreated',
  lastModified: 'lastModified'
});

exports.Prisma.ChannelScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  url: 'url',
  image: 'image',
  channelType: 'channelType',
  description: 'description',
  emoji: 'emoji',
  userId: 'userId',
  organizationId: 'organizationId',
  dateCreated: 'dateCreated',
  lastModified: 'lastModified'
});

exports.Prisma.InvitationScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  inviteeEmail: 'inviteeEmail',
  inviteeName: 'inviteeName',
  organizationId: 'organizationId',
  dateCreated: 'dateCreated',
  lastModified: 'lastModified'
});

exports.Prisma.TagScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  userId: 'userId',
  dateCreated: 'dateCreated',
  lastModified: 'lastModified'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  Organization: 'Organization',
  User: 'User',
  GoogleProfile: 'GoogleProfile',
  Board: 'Board',
  Position: 'Position',
  Channel: 'Channel',
  Invitation: 'Invitation',
  Tag: 'Tag'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
